// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity;

import com.azure.communication.programmableconnectivity.models.DeviceLocationVerificationContent;
import com.azure.communication.programmableconnectivity.models.DeviceLocationVerificationResult;
import com.azure.communication.programmableconnectivity.models.Ipv4Address;
import com.azure.communication.programmableconnectivity.models.LocationDevice;
import com.azure.communication.programmableconnectivity.models.NetworkIdentifier;
import com.azure.communication.programmableconnectivity.models.NetworkRetrievalResult;
import com.azure.communication.programmableconnectivity.models.SimSwapRetrievalContent;
import com.azure.communication.programmableconnectivity.models.SimSwapRetrievalResult;
import com.azure.identity.DefaultAzureCredentialBuilder;

public final class ReadmeSamples {
    public void readmeSamples() {
        // BEGIN: com.azure.communication.programmableconnectivity.readme
        // Initialize the Programmable Connectivity client
        // Create a client using DefaultAzureCredential
        String endpoint = "https://your-resource-name.communication.azure.com";
        
        // Example 1: Verify device location
        DeviceLocationClient deviceLocationClient = new ProgrammableConnectivityClientBuilder()
            .credential(new DefaultAzureCredentialBuilder().build())
            .endpoint(endpoint)
            .buildDeviceLocationClient();
        
        // Prepare device information for verification
        LocationDevice deviceInfo = new LocationDevice()
            .setNetworkAccessIdentifier("user@example.com")
            .setPhoneNumber("+12065550100")
            .setIpv4Address(new Ipv4Address("192.0.2.10", 8080));
        
        // Create verification content with location coordinates
        DeviceLocationVerificationContent verificationContent = new DeviceLocationVerificationContent(
            new NetworkIdentifier("ipv4", "192.0.2.10"), // Type and value
            47.6062,                                     // Latitude
            -122.3321,                                   // Longitude
            50,                                          // Accuracy in meters
            deviceInfo
        );
        
        // Perform the verification
        String correlationId = "my-correlation-id-123";
        DeviceLocationVerificationResult result = deviceLocationClient.verify(correlationId, verificationContent);
        System.out.println("Verification result: " + result.isVerificationResult());
        
        // Example 2: Retrieve device network information
        DeviceNetworkClient deviceNetworkClient = new ProgrammableConnectivityClientBuilder()
            .credential(new DefaultAzureCredentialBuilder().build())
            .endpoint(endpoint)
            .buildDeviceNetworkClient();
        
        // Retrieve network information using an IPv4 address
        NetworkRetrievalResult networkInfo = deviceNetworkClient.retrieve(
            "correlation-id-456",
            new NetworkIdentifier("ipv4", "203.0.113.45")
        );
        
        // Access network information
        System.out.println("Network code: " + networkInfo.getNetworkCode());
        
        // Example 3: Retrieve SIM Swap information
        SimSwapClient simSwapClient = new ProgrammableConnectivityClientBuilder()
            .credential(new DefaultAzureCredentialBuilder().build())
            .endpoint(endpoint)
            .buildSimSwapClient();
        
        // Create the request content with network identifier and phone number
        SimSwapRetrievalContent simSwapContent = new SimSwapRetrievalContent(
            new NetworkIdentifier("ipv4", "192.0.2.10"))
            .setPhoneNumber("+12065550199");
        
        // Perform SIM swap information retrieval
        String simSwapCorrelationId = "sim-swap-correlation-123";
        SimSwapRetrievalResult simSwapResult = simSwapClient.retrieve(simSwapCorrelationId, simSwapContent);
        
        // Process the SIM swap information
        System.out.println("SIM swap date: " + simSwapResult.getDate());
        // END: com.azure.communication.programmableconnectivity.readme
    }
}
